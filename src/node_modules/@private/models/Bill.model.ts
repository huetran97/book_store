import * as mongoose from 'mongoose';
import User, { UserModelInterface } from '@private/models/User.model';
import Cart, { CartModelInterface } from '@private/models/Cart.model';
import ShippingCost, { ShippingCostModelInterface } from '@private/models/ShippingCost.model';

const statics = {
    PENDING: 'PENDING',
    DONE: 'DONE'
};

const schema = new mongoose.Schema({
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'user',
        index: true
    },
    cart: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'cart',
        index: true
    }],
    status: { type: String, default: statics.PENDING },
    shipping: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'shipping_cost',
        index: true
    },

    shipping_address: String,
    distance: Number,
    total_amount: { type: Number, default: 0 }
}, {
    timestamps: {
        createdAt: 'created_at',
        updatedAt: 'updated_at'
    }
});

schema.pre('save', async function (next) {
    let err;
    let that: any = this;


    let user_data = await User.findOne({ _id: that.user, is_active: true });
    if (!user_data) {
        err = new Error('User not found');
        next(err);
    }

    let shipping_cost_data = await ShippingCost.findOne({ _id: that.shipping, is_active: true });
    if (!shipping_cost_data) {
        err = new Error('Shipping cost not found');
        next(err);
    }


});

export interface BillModelInterface extends mongoose.Document {
    user: mongoose.Types.ObjectId | UserModelInterface
    cart: [mongoose.Types.ObjectId | CartModelInterface]
    status: string
    shipping: mongoose.Types.ObjectId | ShippingCostModelInterface
    shipping_address: string
    distance: number
    total_amount: number
    created_at: Date,
    updated_at: Date
}

interface BillStaticsInterface extends mongoose.Model<BillModelInterface> {
    BillModelInterface: BillModelInterface,
    PENDING: 'PENDING',
    DONE: 'DONE'
}

export default mongoose.model<BillModelInterface, BillStaticsInterface>('bill', schema, 'bill');