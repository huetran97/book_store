import * as mongoose from 'mongoose';
import User, { UserModelInterface } from '@private/models/User.model';
import Book, { BookModelInterface } from '@private/models/Book.model';

const schema = new mongoose.Schema({
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'user',
        index: true
    },
    book: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'book',
        index: true
    },
    message: String
}, {
    timestamps: {
        createdAt: 'created_at',
        updatedAt: 'updated_at'
    }
});

schema.virtual('id').get(function () {
    return this._id.toHexString();
});

schema.pre('save', async function (next) {
    let err;
    let that: any = this;

    let user_data = await User.findOne({ _id: that.user });
    if (!user_data) {
        err = new Error('User not found');
        next(err);
    }

    let book_data = await Book.findOne({ _id: that.book });
    if (!book_data) {
        err = new Error('Book not found');
        next(err);
    }
});

export interface CommentModelInterface extends mongoose.Document {
    user: mongoose.Types.ObjectId | UserModelInterface
    book: mongoose.Types.ObjectId | BookModelInterface
    message: string
    created_at: Date
    updated_at: Date
}

export default mongoose.model<CommentModelInterface>('comment', schema, 'comment');