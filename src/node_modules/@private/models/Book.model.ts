import * as mongoose from 'mongoose';
import Author, { AuthorModelInterface } from './Author.model';
import Publisher, { PublisherModelInterface } from '@private/models/Publisher.model';
import Store, { StoreModelInterface } from '@private/models/Store.model';
import IssuingCompany, { IssuingCompanyModelInterface } from '@private/models/IssuingCompany.model';
import Language, { LanguageModelInterface } from '@private/models/Language.model';
import DomainKnowledge, { DomainKnowledgeModelInterface } from '@private/models/DomainKnowledge.model';
import Subject, { SubjectModelInterface } from '@private/models/Subject.model';

const statics = {
    PAPERBACK: 'BÌA MỀM',
    HARDCOVER: 'BÌA CỨNG',
};

const schema = new mongoose.Schema({
    name: { type: String, unique: true },
    description: String,
    author: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'author',
        index: true
    },
    rate: Number,
    quantity_sold: Number,
    price: { type: Number, default: 0 },
    publisher: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'publisher',
        index: true
    },
    publication_date: { type: Number, default: 0 },
    size: { type: String, default: '14 x 20 cm' },
    issuing_company: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'issuing_company',
        index: true
    },
    print_length: { type: Number, default: 0 },
    name_slug: { type: String, index: true },
    cover_type: { type: String, default: statics.PAPERBACK },
    store: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'store',
        index: true
    },
    language: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'language',
        index: true
    },
    domain_knowledge: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'domain_knowledge',
        index: true
    },
    subject: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'subject',
        index: true
    }],
    amount: { type: Number, default: 0 },
    is_active: { type: Boolean, default: true }
}, {
    timestamps: {
        createdAt: 'created_at',
        updatedAt: 'updated_at'
    }
});

schema.virtual('id').get(function () {
    return this._id.toHexString();
});

schema.statics = statics;

schema.pre('save', async function (next) {
    let err;
    let that: any = this;

    let author_data = await Author.findOne({
        _id: that.author
    });

    if (!author_data) {
        err = new Error('Author not found');
        next(err);
    }

    let publisher_data = await Publisher.findOne({
        _id: that.publisher
    });

    if (!publisher_data) {
        err = new Error('Publisher not found');
        next(err);
    }

    let store_data = await Store.findOne({ _id: that.store });
    if (!store_data) {
        err = new Error('Store not found');
        next(err);
    }

    let issuing_company_data = await IssuingCompany.findOne({ _id: that.issuing_company });
    if (!issuing_company_data) {
        err = new Error('Issuing Company not found');
        next(err);
    }

    let language = await Language.findOne({ _id: that.language });
    if (!language) {
        err = new Error('Language not found');
        next(err);
    }

    let domain_knowledge = await DomainKnowledge.findOne({ _id: that.domain_knowledge });
    if (!domain_knowledge) {
        err = new Error('Domain Knowledge not found');
        next(err);
    }
    for (let subject_id of that.subject) {
        let subject = await Subject.findOne({ _id: subject_id });
        if (!subject) {
            err = new Error('Subject not found');
            next(err);
        }
    }

});


export interface BookModelInterface extends mongoose.Document {
    name: string
    description: string
    name_slug: string
    is_active: boolean
    author: mongoose.Types.ObjectId | AuthorModelInterface
    rate: number
    quantity_sold: number
    price: number
    publisher: mongoose.Types.ObjectId | PublisherModelInterface
    publication_date: number
    language: mongoose.Types.ObjectId | LanguageModelInterface
    domain_knowledge: mongoose.Types.ObjectId | DomainKnowledgeModelInterface
    subject: mongoose.Types.ObjectId | SubjectModelInterface
    size: string
    issuing_company: mongoose.Types.ObjectId | IssuingCompanyModelInterface
    print_length: number
    cover_type: string
    store: mongoose.Types.ObjectId | StoreModelInterface
    amount: Number
    created_at: Date
    updated_at: Date
}

interface BookStaticInterface extends mongoose.Model<BookModelInterface> {
    BookModelInterface: BookModelInterface
}

export default mongoose.model<BookModelInterface, BookStaticInterface>('book', schema, 'book');