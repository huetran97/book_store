import * as mongoose from 'mongoose';
import Book, { BookModelInterface } from '@private/models/Book.model';
import Event, { EventModelInterface } from '@private/models/Event.model';

const schema = new mongoose.Schema({
    book: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'book',
        index: true
    },
    event: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'event',
        index: true
    },
    discount: { type: Number, default: 0 }
}, {
    timestamps: {
        createdAt: 'created_at',
        updatedAt: 'updated_at'
    }
});

schema.virtual('id').get(function () {
    return this._id.toHexString();
});

schema.pre('save', async function (next) {
    let err;
    let that: any = this;

    let book_data = await Book.findOne({ _id: that.book });
    if (!book_data) {
        err = new Error('Book not found');
        next(err);
    }

    let event_data = await Event.findOne({ _id: that.event });
    if (!event_data) {
        err = new Error('Event not found');
        next(err);
    }
});

export interface PromotionModelInterface extends mongoose.Document {
    book: mongoose.Types.ObjectId | BookModelInterface,
    event: mongoose.Types.ObjectId | EventModelInterface,
    discount: number
}


export default mongoose.model<PromotionModelInterface>('promotion', schema, 'promotion');