import * as mongoose from 'mongoose';
import * as _ from 'lodash';

const statics = {
    ALL_PERMISSIONS: [
        {
            value: 'BOOK_MANAGER',
            text: 'Books management'
        },
        {
            value: 'STAFF_MANAGER',
            text: 'Staffs management'
        },
        {
            value: 'PUBLISHER_MANAGER',
            text: 'Publisher management'
        },

        {
            value: 'ISSUING_COMPANY_MANAGER',
            text: 'Issuing company management'
        },
        {
            value: 'STORE_MANAGER',
            text: 'Store management'
        },
        {
            value: 'CMS_GROUP_MANAGER',
            text: 'CMS Group management'
        },
        {
            value: 'CMS_MANAGER',
            text: 'CMS management'
        }
    ]
};
const schema  = new mongoose.Schema({
    name: String,
    permissions: {
        type: Array,
        default: []
    }
}, {
    timestamps: {
        createdAt: 'created_at',
        updatedAt: 'updated_at'
    }
});

schema.virtual('id').get(function () {
    return this._id.toHexString();
});

schema.statics = statics;

schema.pre('save', async function (next) {
    let err;
    let that: any = this;

    that.permissions = _.filter(that.permissions, function (permission) {
        return _.findIndex(statics.ALL_PERMISSIONS, function ({ value }) {
            return permission === value;
        }) >= 0 ? true : false;
    });

    next();
});


export interface CmsGroupModelInterface extends mongoose.Document {
    name: string
    permissions: string[]
    created_at: Date
    updated_at: Date
}

interface CmsGroupStaticInterface extends mongoose.Model<CmsGroupModelInterface> {
    CmsGroupModelInterface: CmsGroupModelInterface
}

export default mongoose.model<CmsGroupModelInterface, CmsGroupStaticInterface>('cms_group', schema, 'cms_group');